generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String?        @unique
  phone            String?        @unique
  name             String?
  roleName         String?        @map("role")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt
  emailConfirmedAt DateTime?
  phoneConfirmedAt DateTime?
  lastSignInAt     DateTime?
  isSuperAdmin     Boolean?
  password         String
  notifications    Notification[]
  ongsDocuments    OngsDocument[]
  profiles         Profile?
  userFcmTokens    UserFcmToken[]

  @@map("users")
  Campaign Campaign[]
}

model Blog {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  description String?
  userId      Int?
  ongId       Int?
  title       String?
  image       String?
  profile     Profile?  @relation(fields: [userId], references: [id])
  ong         Ong?      @relation(fields: [ongId], references: [id])

  @@map("blogs")
}

model CampaignComment {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  userId      Int?
  campaignId  Int?
  description String?
  profile     Profile?  @relation(fields: [userId], references: [id])
  campaign    Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_comments")
}

model CampaignContributor {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  campaignId  Int?
  userId      Int?
  money       Decimal?  @default(0)
  isAnonymous Boolean?  @default(false)
  profile     Profile?  @relation(fields: [userId], references: [id])
  campaign    Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_contributors")
}

model CampaignDocument {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  documentPath String?
  updatedAt    DateTime? @updatedAt
  campaignId   Int?
  userId       Int?
  isApproved   Boolean?  @default(false)
  profile      Profile?  @relation(fields: [userId], references: [id])
  campaign     Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_documents")
}

model CampaignMidia {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  userId     Int?
  campaignId Int?
  midiaUrl   String?
  midiaType  String    @default("image")
  profile    Profile?  @relation(fields: [userId], references: [id])
  campaign   Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_midias")
}

model CampaignUpdate {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  title       String?
  description String?
  campaignId  Int?
  userId      Int?
  profile     Profile?  @relation(fields: [userId], references: [id])
  campaign    Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_updates")
}

model Campaign {
  id                    Int                   @id @default(autoincrement())
  createdAt             DateTime              @default(now())
  updatedAt             DateTime?             @updatedAt
  categoryId            Int?
  description           String?
  fundraisingGoal       Float?
  fundsRaised           Float?
  imageCoverUrl         String?
  institution           String?
  location              String?
  numberOfContributions Int?
  ongId                 Int?
  phoneNumber           String?
  priority              Int?                  @default(0)
  endDate               DateTime?
  title                 String?
  userId             Int?
  startDate             DateTime?
  isUrgent              Boolean?              @default(false)
  isActivate            Boolean?              @default(true)
  beneficiaryName       String?
  campaignType          String?
  currency              String                @default("AOA")
  birth                 DateTime?
  status                String?               @default("active")
  campaignComments      CampaignComment[]
  campaignContributors  CampaignContributor[]
  campaignDocuments     CampaignDocument[]
  campaignMidias        CampaignMidia[]
  campaignUpdates       CampaignUpdate[]
  user                  User?              @relation(fields: [userId], references: [id])
  ong                   Ong?                  @relation(fields: [ongId], references: [id])
  category              Category?             @relation(fields: [categoryId], references: [id])

  @@map("campaigns")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  campaigns   Campaign[]

  @@map("categories")
}

model Community {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  userId      Int?
  name        String?
  description String?
  image       String?
  banner      String?
  profile     Profile? @relation(fields: [userId], references: [id])

  @@map("communities")
}

model Event {
  id                 Int       @id @default(autoincrement())
  ongId              Int?
  userId             Int?
  title              String?
  location           String?
  description        String?
  backgroundImageUrl String?
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  profile            Profile?  @relation(fields: [userId], references: [id])
  ong                Ong?      @relation(fields: [ongId], references: [id])

  @@map("events")
}

model Favorite {
  id        Int       @id @default(autoincrement())
  userId    Int?
  itemId    Int
  itemType  String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  profile   Profile?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("favorites")
}

model Feed {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  userId      Int?
  ongId       Int?
  image       String?
  description String?
  profile     Profile? @relation(fields: [userId], references: [id])
  ong         Ong?     @relation(fields: [ongId], references: [id])

  @@map("feeds")
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int?
  title     String
  message   String
  type      String
  createdAt DateTime? @default(now())
  isRead    Boolean?  @default(false)
  imageUrl  String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Ong {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
  about           String?
  bio             String?
  coverImageUrl   String?
  isVerified      Boolean?       @default(false)
  mission         String?
  name            String?
  phoneNumber     String?
  profileImageUrl String?
  servicesNumber  BigInt?        @default(0)
  supportsNumber  BigInt?        @default(0)
  userId          Int?
  vision          String?
  status          String         @default("pending")
  email           String?
  website         String?
  blogs           Blog[]
  campaigns       Campaign[]
  events          Event[]
  feeds           Feed[]
  profile         Profile?       @relation(fields: [userId], references: [id])
  ongsDocuments   OngsDocument[]

  @@map("ongs")
}

model OngsDocument {
  id                            String    @id @default(uuid())
  userId                        Int?
  ongId                         Int?
  statutes_constitutive_act     String
  declaration_good_standing     String
  minutes_constitutive_assembly String
  publicDeed                    String
  registrationCertificate       String?
  nif                           String
  biRepresentative              String
  status                        String?   @default("pending")
  createdAt                     DateTime? @default(now())
  updatedAt                     DateTime? @updatedAt
  user                          User?     @relation(fields: [userId], references: [id])
  ong                           Ong?      @relation(fields: [ongId], references: [id])

  @@map("ongs_documents")
}

model Payment {
  id          Int       @id @default(autoincrement())
  status      String?
  signature   String?
  identifier  String?
  paymentTrx  String?
  amount      Decimal?  @default(0)
  paymentType String?
  currency    String?
  createdAt   DateTime? @default(now())

  @@map("payments")
}

model Profile {
  id                   Int                   @id @default(autoincrement())
  firstName            String?
  email                String?               @unique
  avatarUrl            String?
  bio                  String?
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
  location             String?
  isVerified           Boolean?              @default(false)
  role                 String?
  donationQtd          BigInt?               @default(0)
  campaignQtd          BigInt?               @default(0)
  lastName             String?
  fullName             String?
  phoneNumber          String?
  blogs                Blog[]
  campaignComments     CampaignComment[]
  campaignContributors CampaignContributor[]
  campaignDocuments    CampaignDocument[]
  campaignMidias       CampaignMidia[]
  campaignUpdates      CampaignUpdate[]
  communities          Community[]
  events               Event[]
  favorites            Favorite[]
  feeds                Feed[]
  Ong                  Ong[]
  user                 User                  @relation(fields: [id], references: [id])

  @@map("profiles")
}

model UserFcmToken {
  id        Int       @id @default(autoincrement())
  userId    Int?
  fcmToken  String    @unique
  createdAt DateTime? @default(now())
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_fcm_tokens")
}
