generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String?        @unique
  phone            String?        @unique
  name             String?
  roleName         String?        @map("role")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt
  emailConfirmedAt DateTime?
  phoneConfirmedAt DateTime?
  lastSignInAt     DateTime?
  isSuperAdmin     Boolean?
  password         String
  notifications    Notification[]
  ongsDocuments    OngsDocument[]
  profile         Profile?
  userFcmTokens    UserFcmToken[]
  Campaign Campaign[]
  Ong Ong[]
  Blog Blog[]
  Feed Feed[]
  FeedComment FeedComment[]
  CampaignContributor CampaignContributor[]
  CampaignComment CampaignComment[]
  CampaignDocument CampaignDocument[]
  CampaignMidia CampaignMidia[]
  CampaignUpdate CampaignUpdate[]
  Community Community[]
  Event Event[]
  FeedLike FeedLike[]
  FeedView FeedView[]
  @@map("users")  
}

model Blog {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  description String?
  userId      Int?
  ongId       Int?
  title       String?
  image       String?
  user     User?  @relation(fields: [userId], references: [id])
  ong         Ong?      @relation(fields: [ongId], references: [id])

  @@map("blogs")  
}

model FeedComment {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  userId      Int?
  feedId  Int?
  description String?
  user    User?  @relation(fields: [userId], references: [id])
  feed    Feed? @relation(fields: [feedId], references: [id])

  @@map("feed_comments")
}


model FeedLike {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  userId      Int?
  feedId  Int?
  description String?
  user    User?  @relation(fields: [userId], references: [id])
  feed    Feed? @relation(fields: [feedId], references: [id])

  @@map("feed_likes")
}

model FeedView {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  userId      Int?
  feedId  Int?
  description String?
  user    User?  @relation(fields: [userId], references: [id])
  feed    Feed? @relation(fields: [feedId], references: [id])

  @@map("feed_views")
}

model CampaignComment {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  userId      Int?
  campaignId  Int?
  description String?
  user     User?  @relation(fields: [userId], references: [id])
  campaign    Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_comments")
  Profile Profile[]
}

model CampaignContributor {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  campaignId  Int?
  userId      Int?
  money       Decimal?  @default(0)
  isAnonymous Boolean?  @default(false)
  user     User?  @relation(fields: [userId], references: [id])
  campaign    Campaign? @relation(fields: [campaignId], references: [id])
  Profile Profile[]
  @@map("campaign_contributors")
  
}

model CampaignDocument {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  documentPath String?
  updatedAt    DateTime? @updatedAt
  campaignId   Int?
  userId       Int?
  isApproved   Boolean?  @default(false)
  user      User?  @relation(fields: [userId], references: [id])
  campaign     Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_documents")
  Profile Profile[]
}

model CampaignMidia {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  userId     Int?
  campaignId Int?
  midiaUrl   String?
  midiaType  String    @default("image")
  user    User?  @relation(fields: [userId], references: [id])
  campaign   Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_midias")
  Profile Profile[]
}

model CampaignUpdate {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  title       String?
  description String?
  campaignId  Int?
  userId      Int?
  user     User?  @relation(fields: [userId], references: [id])
  campaign    Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_updates")
  Profile Profile[]
}

model Campaign {
  id                    Int                   @id @default(autoincrement())
  createdAt             DateTime              @default(now())
  updatedAt             DateTime?             @updatedAt
  categoryId            Int?
  description           String?
  fundraisingGoal       Float?
  fundsRaised           Float?
  imageCoverUrl         String?
  institution           String?
  location              String?
  numberOfContributions Int?
  ongId                 Int?
  phoneNumber           String?
  endDate               DateTime?
  title                 String?
  userId             Int?
  startDate             DateTime?
  isActivate            Boolean?              @default(true)
  beneficiaryName       String?
  campaignType          String?
  currency              String                @default("AOA")
  birth                 DateTime?
  status                String?               @default("active")
  campaignComments      CampaignComment[]
  campaignContributors  CampaignContributor[]
  campaignDocuments     CampaignDocument[]
  campaignMidias        CampaignMidia[]
  campaignUpdates       CampaignUpdate[]
  user                  User?              @relation(fields: [userId], references: [id])
  ong                   Ong?                  @relation(fields: [ongId], references: [id])
  category              Category?             @relation(fields: [categoryId], references: [id])

  @@map("campaigns")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  campaigns   Campaign[]

  @@map("categories")
}

model Community {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  userId      Int?
  name        String?
  description String?
  image       String?
  banner      String?
  user     User? @relation(fields: [userId], references: [id])

  @@map("communities")
  Profile Profile[]
}

model Event {
  id                 Int       @id @default(autoincrement())
  ongId              Int?
  userId             Int?
  title              String?
  location           String?
  latitude           Decimal?
  longitude          Decimal?
  description        String?
  backgroundImageUrl String?
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  user            User?  @relation(fields: [userId], references: [id])
  ong                Ong?      @relation(fields: [ongId], references: [id])

  @@map("events")
  Profile Profile[]
}

model Favorite {
  id        Int       @id @default(autoincrement())
  userId    Int?
  itemId    Int
  itemType  String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  profile   Profile?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("favorites")
}

model Feed {
 id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  description String?
  userId      Int?
  ongId       Int?
  title       String?
  image       String?
  user     User?  @relation(fields: [userId], references: [id])
  ong         Ong?      @relation(fields: [ongId], references: [id])

  @@map("feeds")  
  FeedComment FeedComment[]
  Profile Profile[]
  FeedLike FeedLike[]
  FeedView FeedView[]
}

model Notification {
  id        Int       @id @default(autoincrement())
  userId    Int?
  title     String
  message   String
  type      String
  createdAt DateTime? @default(now())
  isRead    Boolean?  @default(false)
  imageUrl  String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Ong {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
  about           String?
  bio             String?
  coverImageUrl   String?
  isVerified      Boolean?       @default(false)
  mission         String?
  name            String?
  phoneNumber     String?
  profileImageUrl String?
  servicesNumber  Int?        @default(0)
  supportsNumber  Int?        @default(0)
  userId          Int?
  vision          String?
  status          String         @default("pending")
  email           String?
  website         String?
  blogs           Blog[]
  campaigns       Campaign[]
  events          Event[]
  feeds           Feed[]
  user         User?       @relation(fields: [userId], references: [id])
  ongsDocuments   OngsDocument[]

  @@map("ongs")
}

model OngsDocument {
  id                            String    @id @default(uuid())
  userId                        Int?
  ongId                         Int?
  statutes_constitutive_act     String
  declaration_good_standing     String
  minutes_constitutive_assembly String
  publicDeed                    String
  registrationCertificate       String?
  nif                           String
  biRepresentative              String
  status                        String?   @default("pending")
  createdAt                     DateTime? @default(now())
  updatedAt                     DateTime? @updatedAt
  user                          User?     @relation(fields: [userId], references: [id])
  ong                           Ong?      @relation(fields: [ongId], references: [id])

  @@map("ongs_documents")
}

model Payment {
  id          Int       @id @default(autoincrement())
  status      String?
  signature   String?
  identifier  String?
  paymentTrx  String?
  amount      Decimal?  @default(0)
  paymentType String?
  currency    String?
  createdAt   DateTime? @default(now())

  @@map("payments")
}

model Profile {
  id                   Int                   @id @default(autoincrement())
  firstName            String?
  email                String?               @unique
  avatarUrl            String?
  bio                  String?
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
  location             String?
  latitude             Decimal
  longitude            Decimal
  isVerified           Boolean?              @default(false)
  role                 String?
  donationQtd          BigInt?               @default(0)
  campaignQtd          BigInt?               @default(0)
  lastName             String?
  fullName             String?
  phoneNumber          String?  
  campaignComments     CampaignComment[]
  campaignContributors CampaignContributor[]
  campaignDocuments    CampaignDocument[]
  campaignMidias       CampaignMidia[]
  campaignUpdates      CampaignUpdate[]
  communities          Community[]
  events               Event[]
  favorites            Favorite[]
  feeds                Feed[]  
  user                 User                  @relation(fields: [id], references: [id])

  @@map("profiles")
}

model UserFcmToken {
  id        Int       @id @default(autoincrement())
  userId    Int?
  fcmToken  String    @unique
  createdAt DateTime? @default(now())
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_fcm_tokens")
}
