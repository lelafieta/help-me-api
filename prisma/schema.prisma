generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email            String?        @unique
  phone            String?        @unique
  fullName         String?
  firstName        String?
  lastName         String?     
  avatarUrl        String?
  roleName         String?        @map("role")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt
  emailConfirmedAt DateTime?
  phoneConfirmedAt DateTime?
  lastSignInAt     DateTime?
  isSuperAdmin     Boolean?
  password         String
  notifications    Notification[]
  ongsDocuments    OngsDocument[]
  profile         Profile?
  userFcmTokens    UserFcmToken[]
  Campaign Campaign[]
  Ong Ong[]
  Blog Blog[]  
  
  FeedComment FeedComment[]
  CampaignContributor CampaignContributor[]
  CampaignComment CampaignComment[]
  CampaignDocument CampaignDocument[]
  CampaignMidia CampaignMidia[]
  CampaignUpdate CampaignUpdate[]
  Community Community[]
  Event Event[]
  FeedLike FeedLike[]
  FeedView FeedView[]  
  // Comment Comment[]
  Resource Resource[]
  CommunityMember CommunityMember[]
  Post Post[]
  Message Message[]
  ChatMember ChatMember[]
  Favorite Favorite[]

  
  OngMember OngMember[]
  OngJoinRequest OngJoinRequest[]
  MemberOng MemberOng[]
  Impact Impact[]
  EventParticipant EventParticipant[]
  BlogComment BlogComment[]
  BlogLike BlogLike[]
  BlogShare BlogShare[]
  Share Share[] @relation("UserShare")
  Comment Comment[] @relation("UserComments")
  Like Like[] @relation("UserLikes")
  @@map("users")  
  
  
}

model Blog {
  id          String   @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  description String?
  userId      String?
  ongId       String?
  read        Int      @default(0)
  title       String?
  image       String?
  user     User?  @relation(fields: [userId], references: [id])
  ong        Ong?      @relation(fields: [ongId], references: [id])


  views View[] @relation("BlogViews")  
  likes Like[] @relation("BlogLikes")
  shares Share[] @relation("BlogShares")
  comments Comment[] @relation("BlogComments")  
  resources Resource[]

  @@map("blogs")  
  

  
}

model BlogComment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  blogId String
  userId String

  // blog   Blog @relation(fields: [blogId], references: [id])
  user   User @relation(fields: [userId], references: [id])

  @@map("blog_comments")
}

model BlogLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  blogId String
  userId String

  // blog Blog @relation(fields: [blogId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([blogId, userId]) // evita likes duplicados
  @@map("blog_likes")
}

model BlogShare {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  blogId String
  userId String

  // blog Blog @relation(fields: [blogId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@map("blog_shares")
}



model FeedComment {
  id          String   @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String?
  feedId  String?
  description String?
  user    User?  @relation(fields: [userId], references: [id])
  // feed    Feed? @relation(fields: [feedId], references: [id])

  @@map("feed_comments")
}


model FeedLike {
  id          String   @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String?
  feedId  String?
  description String?
  user    User?  @relation(fields: [userId], references: [id])
  // feed    Feed? @relation(fields: [feedId], references: [id])

  @@map("feed_likes")
}

model FeedView {
  id              String   @id @default(uuid())
  // feed      Feed     @relation(fields: [feedId], references: [id])
  feedId    String

  user      User?    @relation(fields: [userId], references: [id])
  userId   String?

  ip        String?  // útil para identificar anônimos (cuidado com privacidade)
  userAgent String?  // opcional para analytics
  viewedAt  DateTime @default(now())

  @@index([feedId])
  @@unique([feedId, userId]) 
  @@map("feed_views")
}

model CampaignComment {
  id          String   @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String?
  campaignId  String?
  description String?
  user     User?  @relation(fields: [userId], references: [id])
  // campaign    Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_comments")  
}

model CampaignContributor {
  id          String   @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  campaignId  String?
  userId      String?
  money       Decimal?  @default(0)
  isAnonymous Boolean?  @default(false)
  user     User?  @relation(fields: [userId], references: [id])
  campaign    Campaign? @relation(fields: [campaignId], references: [id])  
  @@map("campaign_contributors")
  
}

model CampaignDocument {
  id           String   @id @default(uuid())
  createdAt    DateTime  @default(now())
  documentPath String?
  updatedAt    DateTime? @updatedAt
  campaignId   String?
  userId       String?
  isApproved   Boolean?  @default(false)
  user         User?  @relation(fields: [userId], references: [id])
  campaign     Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_documents")  
}

model CampaignMidia {
  id         String   @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  userId     String?
  campaignId String?
  midiaUrl   String?
  midiaType  String    @default("image")
  user    User?  @relation(fields: [userId], references: [id])
  campaign   Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_midias")  
}

model CampaignUpdate {
  id          String   @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  title       String?
  description String?
  campaignId  String?
  userId      String?
  user     User?  @relation(fields: [userId], references: [id])
  campaign    Campaign? @relation(fields: [campaignId], references: [id])

  @@map("campaign_updates")  
}

// all
// active
// cending
// completed
// cancelled
// scheduled
// paused
// draft
// expired

model Campaign {
  id          String   @id @default(uuid())
  createdAt             DateTime              @default(now())
  updatedAt             DateTime?             @updatedAt
  categoryId            String?
  description           String?
  fundraisingGoal       Float?
  fundsRaised           Float?                @default(0)
  imageCoverUrl         String?
  institution           String?
  location              String?
  numberOfContributions Int?
  ongId                 String?
  phoneNumber           String?
  endDate               DateTime?
  title                 String?
  userId                String?
  startDate             DateTime?
  isActivate            Boolean?              @default(true)
  beneficiaryName       String?
  campaignType          String?
  currency              String                @default("AOA")
  birth                 DateTime?
  status                String?               @default("active")  
  user                  User?              @relation(fields: [userId], references: [id])
  ong                   Ong?                  @relation(fields: [ongId], references: [id])
  category              Category?             @relation(fields: [categoryId], references: [id])

  
  comments Comment[] @relation("CampaignComments")
  campaignContributors  CampaignContributor[]
  campaignDocuments     CampaignDocument[]
  campaignMidias        CampaignMidia[]
  campaignUpdates       CampaignUpdate[]

  @@map("campaigns")  
}

model Category {
  id          String   @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  campaigns   Campaign[]

  
  community Community[]
  @@map("categories")
}

model Community {
  id          String   @id @default(uuid())
  name        String
  description String?
  location    String?
  imageUrl    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  ownerId     String
  owner       User          @relation(fields: [ownerId], references: [id])

  members     CommunityMember[]
  posts       Post[]
  events      Event[]
  resources   Resource[]
  categories  Category[]  

  @@map("communities")  
  Share Share[] @relation("CommunityShares")
}

model CommunityMember {
  id          String   @id @default(uuid())
  role         String     // ex: "admin", "member", "moderator"
  joinedAt     DateTime   @default(now())

  userId       String
  communityId  String

  user         User       @relation(fields: [userId], references: [id])
  community    Community  @relation(fields: [communityId], references: [id])

  @@unique([userId, communityId])
  @@map("community_members")
}

model Resource {
  id          String   @id @default(uuid())
  title       String?
  type        String     // "pdf", "image", "video", "link"
  url         String
  uploadedAt  DateTime   @default(now())

  postId      String?
  communityId String?
  blogId      String?
  uploaderId  String

  post        Post?       @relation(fields: [postId], references: [id])
  community   Community?  @relation(fields: [communityId], references: [id])
  blog        Blog?       @relation(fields: [blogId], references: [id])
  uploader    User        @relation(fields: [uploaderId], references: [id])

  @@map("resources")
  
}

model Post {
  id           String      @id @default(uuid())  
  content      String?
  createdAt    DateTime    @default(now())

  userId     String
  communityId  String?
  ongId        String?  

  user       User      @relation(fields: [userId], references: [id])
  community    Community?  @relation(fields: [communityId], references: [id])
  ong          Ong?        @relation(fields: [ongId], references: [id])  
  
  resources    Resource[]  // ← relação com recursos
  views View[] @relation("PostViews")
  comments Comment[] @relation("PostComments")
  likes Like[] @relation("PostLikes")
  shares Share[] @relation("PostShares")
  @@map("posts")  
}


// model Comment {
//   id        String   @id @default(uuid())
//   content   String
//   createdAt DateTime @default(now())
  
//   postId    String
//   userId    String

//   post      Post     @relation(fields: [postId], references: [id])
//   user      User     @relation(fields: [userId], references: [id])
//   @@map("comments")
// }

// model Like {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())

//   postId    String
//   userId    String

//   post      Post     @relation(fields: [postId], references: [id])
//   user      User     @relation(fields: [userId], references: [id])

//   @@unique([postId, userId]) // ← impede o mesmo user de curtir o mesmo post mais de uma vez
//   @@map("likes")
// }

// model Share {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())

//   postId    String
//   userId    String

//   post      Post     @relation(fields: [postId], references: [id])
//   user      User     @relation(fields: [userId], references: [id])

//   @@map("shares")
// }

model Event {
  id                String   @id @default(uuid())
  ongId              String?
  userId             String?
  title              String?
  location           String?
  latitude           Decimal?
  longitude          Decimal?
  description        String?
  backgroundImageUrl String?
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  user            User?  @relation(fields: [userId], references: [id])
  ong                Ong?      @relation(fields: [ongId], references: [id])  

  communityId  String?
  community    Community? @relation(fields: [communityId], references: [id])
  eventParticipants EventParticipant[]
  coments Comment[] @relation("EventComments")
  @@map("events")
  
  
}

model EventParticipant {
  id        String   @id @default(uuid())
  eventId   String
  userId    String
  joinedAt  DateTime @default(now())

  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([eventId, userId]) // impede duplicação do mesmo usuário no mesmo evento
  @@map("event_participants")
}

model ChatRoom {
  id          String   @id @default(uuid())
  isGroup      Boolean   @default(false)
  name         String?   // usado apenas para grupos
  createdAt    DateTime  @default(now())

  members      ChatMember[]
  messages     Message[]

  @@map("chat_rooms")
}

model ChatMember {
  id          String   @id @default(uuid())
  userId     String
  chatRoomId String
  joinedAt   DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id])
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id])

  @@unique([userId, chatRoomId])

  @@map("chat_members")
}

model Message {
  id          String   @id @default(uuid())
  content    String
  sentAt     DateTime  @default(now())

  senderId   String
  chatRoomId String

  sender     User      @relation(fields: [senderId], references: [id])
  chatRoom   ChatRoom  @relation(fields: [chatRoomId], references: [id])

  @@map("messages")
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  userId     String
  createdAt  DateTime @default(now())

  postId     String?  
  blogId     String?
  feedId     String?
  campaignId String?
  eventId    String?

  user       User    @relation("UserComments", fields: [userId], references: [id])
  post       Post?    @relation("PostComments", fields: [postId], references: [id])
  blog       Blog?    @relation("BlogComments", fields: [blogId], references: [id])
  event      Event?    @relation("EventComments", fields: [eventId], references: [id])  
  campaign   Campaign?    @relation("CampaignComments", fields: [campaignId], references: [id])
  

  @@map("comments")
}

model Like {
  id         String   @id @default(uuid())
  userId     String
  createdAt  DateTime @default(now())

  postId     String?
  blogId     String?
  feedId     String?

  user       User    @relation("UserLikes", fields: [userId], references: [id])
  post       Post?    @relation("PostLikes", fields: [postId], references: [id])
  blog       Blog?    @relation("BlogLikes", fields: [blogId], references: [id])  
  
  @@map("likes")
}

model Share {
  id         String   @id @default(uuid())
  userId     String
  createdAt  DateTime @default(now())

  postId     String?
  blogId     String?
  feedId     String?
  communityId String?

  user       User    @relation("UserShare", fields: [userId], references: [id])
  post       Post?    @relation("PostShares", fields: [postId], references: [id])
  blog       Blog?    @relation("BlogShares", fields: [blogId], references: [id])  
  community  Community?  @relation("CommunityShares", fields: [communityId], references: [id])


  @@map("shares")
}

model View {
  id         String   @id @default(uuid())
  userId     String?
  ipAddress  String? // opcional, para views anônimas
  createdAt  DateTime @default(now())

  postId     String?
  blogId     String?
  feedId     String?

  post       Post?    @relation("PostViews", fields: [postId], references: [id])
  blog       Blog?    @relation("BlogViews", fields: [blogId], references: [id])

  @@map("views")
}


model Favorite {
  id        String   @id @default(uuid())
  userId    String?
  itemId    String
  itemType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)  

  @@map("favorites")
}

model Notification {
  id          String   @id @default(uuid())
  userId    String?
  title     String
  message   String
  type      String
  createdAt DateTime? @default(now())
  isRead    Boolean?  @default(false)
  imageUrl  String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Ong {
  id          String   @id @default(uuid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime?      @updatedAt
  about           String?
  bio             String?
  coverImageUrl   String?
  isVerified      Boolean?       @default(false)
  mission         String?
  name            String?
  phoneNumber     String?
  profileImageUrl String?
  servicesNumber  Int?        @default(0)
  supportsNumber  Int?        @default(0)
  userId          String?
  vision          String?
  status          String         @default("pending")
  email           String?
  website         String?
  blogs           Blog[]
  campaigns       Campaign[]
  events          Event[]
  user         User?       @relation(fields: [userId], references: [id])
  ongsDocuments   OngsDocument[]
  posts Post[]
  ongMember OngMember[]
  memberOng MemberOng[]
  ongJoinRequest OngJoinRequest[]
  impacts Impact[]
  @@map("ongs")
  
  
}

model Impact {
  id        String         @id @default(uuid())
  title     String
  content   String
  userId    String
  ongId     String
  date      DateTime?       @default(now())
  ong       Ong            @relation(fields: [ongId], references: [id])
  user      User           @relation(fields: [userId], references: [id])
  medias    ImpactMedia[]
  createdAt DateTime       @default(now())

  @@map("impacts")
}

model ImpactMedia {
  id        String   @id @default(uuid())
  impactId  String
  mediaUrl  String
  mediaType String
  impact    Impact   @relation(fields: [impactId], references: [id])
}


model MemberOng {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String
  userId    String?
  ongId     String

  user      User?     @relation(fields: [userId], references: [id])
  ong       Ong      @relation(fields: [ongId], references: [id])

  @@unique([userId, ongId])
}

model OngJoinRequest {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String @default("PENDING")
  role       String 
  name       String
  email      String
  phone      String?
  userId     String?
  ongId      String

  user       User?    @relation(fields: [userId], references: [id])
  ong        Ong      @relation(fields: [ongId], references: [id])
}

model OngsDocument {
  id                            String    @id @default(uuid())
  userId                        String?
  ongId                         String?
  statutes_constitutive_act     String
  declaration_good_standing     String
  minutes_constitutive_assembly String
  publicDeed                    String
  registrationCertificate       String?
  nif                           String
  biRepresentative              String
  status                        String?   @default("pending")
  createdAt                     DateTime? @default(now())
  updatedAt                     DateTime? @updatedAt
  user                          User?     @relation(fields: [userId], references: [id])
  ong                           Ong?      @relation(fields: [ongId], references: [id])

  @@map("ongs_documents")
}


model OngMember {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  role      String // exemplo: "AMIN", "PRESIDENT", "MANAGER", "MEMBER", "VOLUNTEER", "COORDINATOR", "TREASURER", "SECRETARY", "PROJECT_LEADER", "FIELD_AGENT".
  email     String?
  phone     String?

  ongId     String
  userId    String? // caso o membro também seja um usuário da plataforma

  ong       Ong     @relation(fields: [ongId], references: [id])
  user      User?   @relation(fields: [userId], references: [id])

  @@map("ong_members")
}


model Payment {
  id          String   @id @default(uuid())
  status      String?
  signature   String?
  identifier  String?
  paymentTrx  String?
  amount      Decimal?  @default(0)
  paymentType String?
  currency    String?
  createdAt   DateTime? @default(now())

  @@map("payments")
}

model Profile {
  id          String   @id @default(uuid())
  firstName            String?
  email                String?               @unique
  avatarUrl            String?
  bio                  String?
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
  location             String?
  latitude             Decimal?
  longitude            Decimal?
  isVerified           Boolean?              @default(false)
  role                 String?
  donationQtd          Int?               @default(0)
  campaignQtd          Int?               @default(0)
  lastName             String?
  fullName             String?
  phoneNumber          String?    
  user                 User                  @relation(fields: [id], references: [id])

  @@map("profiles")
}

model UserFcmToken {
  id          String   @id @default(uuid())
  userId    String?
  fcmToken  String    @unique
  createdAt DateTime? @default(now())
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_fcm_tokens")
}
